// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: download.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DownloadService service

func NewDownloadServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DownloadService service

type DownloadService interface {
	// 获取下载入口地址
	DownloadEntry(ctx context.Context, in *ReqEntry, opts ...client.CallOption) (*RespEntry, error)
}

type downloadService struct {
	c    client.Client
	name string
}

func NewDownloadService(name string, c client.Client) DownloadService {
	return &downloadService{
		c:    c,
		name: name,
	}
}

func (c *downloadService) DownloadEntry(ctx context.Context, in *ReqEntry, opts ...client.CallOption) (*RespEntry, error) {
	req := c.c.NewRequest(c.name, "DownloadService.DownloadEntry", in)
	out := new(RespEntry)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DownloadService service

type DownloadServiceHandler interface {
	// 获取下载入口地址
	DownloadEntry(context.Context, *ReqEntry, *RespEntry) error
}

func RegisterDownloadServiceHandler(s server.Server, hdlr DownloadServiceHandler, opts ...server.HandlerOption) error {
	type downloadService interface {
		DownloadEntry(ctx context.Context, in *ReqEntry, out *RespEntry) error
	}
	type DownloadService struct {
		downloadService
	}
	h := &downloadServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DownloadService{h}, opts...))
}

type downloadServiceHandler struct {
	DownloadServiceHandler
}

func (h *downloadServiceHandler) DownloadEntry(ctx context.Context, in *ReqEntry, out *RespEntry) error {
	return h.DownloadServiceHandler.DownloadEntry(ctx, in, out)
}
